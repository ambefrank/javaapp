@Library('my-shared-library') _

pipeline{

   agent any

   parameters{

      choice(name: 'action', choices: 'create\ndelete', description: 'choose create/Destroy')
      string(name: 'aws_account_id', description: 'account ID of the aws_account', defaultValue: '217340246210')
      string(name: 'region', description: 'region of the ecr', defaultValue: 'us-east-1')
      string(name: 'ecr_repoName', description: 'name of the ECR Repository', defaultValue: 'ambefrankline')
   }

   stages{

      stage('Git Checkout'){
         when { expression { params.action == 'create'} }        
         steps{
         gitCheckout(
           branch: "main",
           url: "https://github.com/ambefrank/javaapp.git"
         )
         }
      }
      stage('Unit Test Maven'){

         when { expression { params.action == 'create'} }
         
         steps{
            script{

                mvnTest()
            }
         }
      }
      stage('Integration Test Maven'){

         when { expression { params.action == 'create'} }
         
         steps{
            script{

                mvnintegrationTest()
            }
         }
      }
      stage('Static Code Analysis: Sonarqube'){

         when { expression { params.action == 'create'} }
         
         steps{
            script{

                def SonarQubecredentialsId = 'sonar-api'
                staticCodeAnalysis(SonarQubecredentialsId)
            }
         }
      }
      stage('Quality Gate Status Check: Sonarqube'){

         when { expression { params.action == 'create'} }
         
         steps{
            script{

                def SonarQubecredentialsId = 'sonar-api'
                QualityGateStatus(SonarQubecredentialsId)
            }
         }
      }
      stage('Maven Build: Maven'){

         when { expression { params.action == 'create'} }
         
         steps{
            script{

                mvnBuild()
            }
         }
      }
      stage('Docker Image Build: ECR'){

         when { expression { params.action == 'create'} }
         
         steps{
            script{

                DockerBuild("${params.aws_account_id}","${params.region}","${params.ecr_repoName}")
            }
         }
      }
      stage('Docker Image Scan: Trivy'){

         when { expression { params.action == 'create'} }
         
         steps{
            script{

                DockerImageScan("${params.aws_account_id}","${params.region}","${params.ecr_repoName}")
            }
         }
      }
      stage('Docker Image push: ECR'){

         when { expression { params.action == 'create'} }
         
         steps{
            script{

                DockerImagePush("$${params.aws_account_id}","${params.region}","${params.ecr_repoName}")
            }
         }
      }
      stage('Docker Image CleanUp: Docker_ECR'){

         when { expression { params.action == 'create'} }
         
         steps{
            script{

                DockerImageCleanUp("${params.aws_account_id}","${params.region}","${params.ecr_repoName}")
            }
         }
      }
   }
}